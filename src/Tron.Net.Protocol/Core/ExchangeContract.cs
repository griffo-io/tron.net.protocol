// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tronprotocol/core/contract/exchange_contract.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tron.Net.Protocol {

  /// <summary>Holder for reflection information generated from tronprotocol/core/contract/exchange_contract.proto</summary>
  public static partial class ExchangeContractReflection {

    #region Descriptor
    /// <summary>File descriptor for tronprotocol/core/contract/exchange_contract.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ExchangeContractReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjJ0cm9ucHJvdG9jb2wvY29yZS9jb250cmFjdC9leGNoYW5nZV9jb250cmFj",
            "dC5wcm90bxIIcHJvdG9jb2wimwEKFkV4Y2hhbmdlQ3JlYXRlQ29udHJhY3QS",
            "FQoNb3duZXJfYWRkcmVzcxgBIAEoDBIWCg5maXJzdF90b2tlbl9pZBgCIAEo",
            "DBIbChNmaXJzdF90b2tlbl9iYWxhbmNlGAMgASgDEhcKD3NlY29uZF90b2tl",
            "bl9pZBgEIAEoDBIcChRzZWNvbmRfdG9rZW5fYmFsYW5jZRgFIAEoAyJlChZF",
            "eGNoYW5nZUluamVjdENvbnRyYWN0EhUKDW93bmVyX2FkZHJlc3MYASABKAwS",
            "EwoLZXhjaGFuZ2VfaWQYAiABKAMSEAoIdG9rZW5faWQYAyABKAwSDQoFcXVh",
            "bnQYBCABKAMiZwoYRXhjaGFuZ2VXaXRoZHJhd0NvbnRyYWN0EhUKDW93bmVy",
            "X2FkZHJlc3MYASABKAwSEwoLZXhjaGFuZ2VfaWQYAiABKAMSEAoIdG9rZW5f",
            "aWQYAyABKAwSDQoFcXVhbnQYBCABKAMifAobRXhjaGFuZ2VUcmFuc2FjdGlv",
            "bkNvbnRyYWN0EhUKDW93bmVyX2FkZHJlc3MYASABKAwSEwoLZXhjaGFuZ2Vf",
            "aWQYAiABKAMSEAoIdG9rZW5faWQYAyABKAwSDQoFcXVhbnQYBCABKAMSEAoI",
            "ZXhwZWN0ZWQYBSABKANCWQoYb3JnLnRyb24ucHJvdG9zLmNvbnRyYWN0Wiln",
            "aXRodWIuY29tL3Ryb25wcm90b2NvbC9ncnBjLWdhdGV3YXkvY29yZaoCEVRy",
            "b24uTmV0LlByb3RvY29sYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tron.Net.Protocol.ExchangeCreateContract), global::Tron.Net.Protocol.ExchangeCreateContract.Parser, new[]{ "OwnerAddress", "FirstTokenId", "FirstTokenBalance", "SecondTokenId", "SecondTokenBalance" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tron.Net.Protocol.ExchangeInjectContract), global::Tron.Net.Protocol.ExchangeInjectContract.Parser, new[]{ "OwnerAddress", "ExchangeId", "TokenId", "Quant" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tron.Net.Protocol.ExchangeWithdrawContract), global::Tron.Net.Protocol.ExchangeWithdrawContract.Parser, new[]{ "OwnerAddress", "ExchangeId", "TokenId", "Quant" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tron.Net.Protocol.ExchangeTransactionContract), global::Tron.Net.Protocol.ExchangeTransactionContract.Parser, new[]{ "OwnerAddress", "ExchangeId", "TokenId", "Quant", "Expected" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ExchangeCreateContract : pb::IMessage<ExchangeCreateContract> {
    private static readonly pb::MessageParser<ExchangeCreateContract> _parser = new pb::MessageParser<ExchangeCreateContract>(() => new ExchangeCreateContract());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExchangeCreateContract> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tron.Net.Protocol.ExchangeContractReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeCreateContract() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeCreateContract(ExchangeCreateContract other) : this() {
      ownerAddress_ = other.ownerAddress_;
      firstTokenId_ = other.firstTokenId_;
      firstTokenBalance_ = other.firstTokenBalance_;
      secondTokenId_ = other.secondTokenId_;
      secondTokenBalance_ = other.secondTokenBalance_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeCreateContract Clone() {
      return new ExchangeCreateContract(this);
    }

    /// <summary>Field number for the "owner_address" field.</summary>
    public const int OwnerAddressFieldNumber = 1;
    private pb::ByteString ownerAddress_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OwnerAddress {
      get { return ownerAddress_; }
      set {
        ownerAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "first_token_id" field.</summary>
    public const int FirstTokenIdFieldNumber = 2;
    private pb::ByteString firstTokenId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString FirstTokenId {
      get { return firstTokenId_; }
      set {
        firstTokenId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "first_token_balance" field.</summary>
    public const int FirstTokenBalanceFieldNumber = 3;
    private long firstTokenBalance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FirstTokenBalance {
      get { return firstTokenBalance_; }
      set {
        firstTokenBalance_ = value;
      }
    }

    /// <summary>Field number for the "second_token_id" field.</summary>
    public const int SecondTokenIdFieldNumber = 4;
    private pb::ByteString secondTokenId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SecondTokenId {
      get { return secondTokenId_; }
      set {
        secondTokenId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "second_token_balance" field.</summary>
    public const int SecondTokenBalanceFieldNumber = 5;
    private long secondTokenBalance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SecondTokenBalance {
      get { return secondTokenBalance_; }
      set {
        secondTokenBalance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExchangeCreateContract);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExchangeCreateContract other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OwnerAddress != other.OwnerAddress) return false;
      if (FirstTokenId != other.FirstTokenId) return false;
      if (FirstTokenBalance != other.FirstTokenBalance) return false;
      if (SecondTokenId != other.SecondTokenId) return false;
      if (SecondTokenBalance != other.SecondTokenBalance) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OwnerAddress.Length != 0) hash ^= OwnerAddress.GetHashCode();
      if (FirstTokenId.Length != 0) hash ^= FirstTokenId.GetHashCode();
      if (FirstTokenBalance != 0L) hash ^= FirstTokenBalance.GetHashCode();
      if (SecondTokenId.Length != 0) hash ^= SecondTokenId.GetHashCode();
      if (SecondTokenBalance != 0L) hash ^= SecondTokenBalance.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OwnerAddress.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(OwnerAddress);
      }
      if (FirstTokenId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(FirstTokenId);
      }
      if (FirstTokenBalance != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(FirstTokenBalance);
      }
      if (SecondTokenId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(SecondTokenId);
      }
      if (SecondTokenBalance != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(SecondTokenBalance);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OwnerAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(OwnerAddress);
      }
      if (FirstTokenId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(FirstTokenId);
      }
      if (FirstTokenBalance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FirstTokenBalance);
      }
      if (SecondTokenId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SecondTokenId);
      }
      if (SecondTokenBalance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SecondTokenBalance);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExchangeCreateContract other) {
      if (other == null) {
        return;
      }
      if (other.OwnerAddress.Length != 0) {
        OwnerAddress = other.OwnerAddress;
      }
      if (other.FirstTokenId.Length != 0) {
        FirstTokenId = other.FirstTokenId;
      }
      if (other.FirstTokenBalance != 0L) {
        FirstTokenBalance = other.FirstTokenBalance;
      }
      if (other.SecondTokenId.Length != 0) {
        SecondTokenId = other.SecondTokenId;
      }
      if (other.SecondTokenBalance != 0L) {
        SecondTokenBalance = other.SecondTokenBalance;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            OwnerAddress = input.ReadBytes();
            break;
          }
          case 18: {
            FirstTokenId = input.ReadBytes();
            break;
          }
          case 24: {
            FirstTokenBalance = input.ReadInt64();
            break;
          }
          case 34: {
            SecondTokenId = input.ReadBytes();
            break;
          }
          case 40: {
            SecondTokenBalance = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExchangeInjectContract : pb::IMessage<ExchangeInjectContract> {
    private static readonly pb::MessageParser<ExchangeInjectContract> _parser = new pb::MessageParser<ExchangeInjectContract>(() => new ExchangeInjectContract());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExchangeInjectContract> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tron.Net.Protocol.ExchangeContractReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeInjectContract() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeInjectContract(ExchangeInjectContract other) : this() {
      ownerAddress_ = other.ownerAddress_;
      exchangeId_ = other.exchangeId_;
      tokenId_ = other.tokenId_;
      quant_ = other.quant_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeInjectContract Clone() {
      return new ExchangeInjectContract(this);
    }

    /// <summary>Field number for the "owner_address" field.</summary>
    public const int OwnerAddressFieldNumber = 1;
    private pb::ByteString ownerAddress_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OwnerAddress {
      get { return ownerAddress_; }
      set {
        ownerAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exchange_id" field.</summary>
    public const int ExchangeIdFieldNumber = 2;
    private long exchangeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExchangeId {
      get { return exchangeId_; }
      set {
        exchangeId_ = value;
      }
    }

    /// <summary>Field number for the "token_id" field.</summary>
    public const int TokenIdFieldNumber = 3;
    private pb::ByteString tokenId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TokenId {
      get { return tokenId_; }
      set {
        tokenId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "quant" field.</summary>
    public const int QuantFieldNumber = 4;
    private long quant_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Quant {
      get { return quant_; }
      set {
        quant_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExchangeInjectContract);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExchangeInjectContract other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OwnerAddress != other.OwnerAddress) return false;
      if (ExchangeId != other.ExchangeId) return false;
      if (TokenId != other.TokenId) return false;
      if (Quant != other.Quant) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OwnerAddress.Length != 0) hash ^= OwnerAddress.GetHashCode();
      if (ExchangeId != 0L) hash ^= ExchangeId.GetHashCode();
      if (TokenId.Length != 0) hash ^= TokenId.GetHashCode();
      if (Quant != 0L) hash ^= Quant.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OwnerAddress.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(OwnerAddress);
      }
      if (ExchangeId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ExchangeId);
      }
      if (TokenId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(TokenId);
      }
      if (Quant != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Quant);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OwnerAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(OwnerAddress);
      }
      if (ExchangeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExchangeId);
      }
      if (TokenId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TokenId);
      }
      if (Quant != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Quant);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExchangeInjectContract other) {
      if (other == null) {
        return;
      }
      if (other.OwnerAddress.Length != 0) {
        OwnerAddress = other.OwnerAddress;
      }
      if (other.ExchangeId != 0L) {
        ExchangeId = other.ExchangeId;
      }
      if (other.TokenId.Length != 0) {
        TokenId = other.TokenId;
      }
      if (other.Quant != 0L) {
        Quant = other.Quant;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            OwnerAddress = input.ReadBytes();
            break;
          }
          case 16: {
            ExchangeId = input.ReadInt64();
            break;
          }
          case 26: {
            TokenId = input.ReadBytes();
            break;
          }
          case 32: {
            Quant = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExchangeWithdrawContract : pb::IMessage<ExchangeWithdrawContract> {
    private static readonly pb::MessageParser<ExchangeWithdrawContract> _parser = new pb::MessageParser<ExchangeWithdrawContract>(() => new ExchangeWithdrawContract());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExchangeWithdrawContract> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tron.Net.Protocol.ExchangeContractReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeWithdrawContract() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeWithdrawContract(ExchangeWithdrawContract other) : this() {
      ownerAddress_ = other.ownerAddress_;
      exchangeId_ = other.exchangeId_;
      tokenId_ = other.tokenId_;
      quant_ = other.quant_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeWithdrawContract Clone() {
      return new ExchangeWithdrawContract(this);
    }

    /// <summary>Field number for the "owner_address" field.</summary>
    public const int OwnerAddressFieldNumber = 1;
    private pb::ByteString ownerAddress_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OwnerAddress {
      get { return ownerAddress_; }
      set {
        ownerAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exchange_id" field.</summary>
    public const int ExchangeIdFieldNumber = 2;
    private long exchangeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExchangeId {
      get { return exchangeId_; }
      set {
        exchangeId_ = value;
      }
    }

    /// <summary>Field number for the "token_id" field.</summary>
    public const int TokenIdFieldNumber = 3;
    private pb::ByteString tokenId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TokenId {
      get { return tokenId_; }
      set {
        tokenId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "quant" field.</summary>
    public const int QuantFieldNumber = 4;
    private long quant_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Quant {
      get { return quant_; }
      set {
        quant_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExchangeWithdrawContract);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExchangeWithdrawContract other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OwnerAddress != other.OwnerAddress) return false;
      if (ExchangeId != other.ExchangeId) return false;
      if (TokenId != other.TokenId) return false;
      if (Quant != other.Quant) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OwnerAddress.Length != 0) hash ^= OwnerAddress.GetHashCode();
      if (ExchangeId != 0L) hash ^= ExchangeId.GetHashCode();
      if (TokenId.Length != 0) hash ^= TokenId.GetHashCode();
      if (Quant != 0L) hash ^= Quant.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OwnerAddress.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(OwnerAddress);
      }
      if (ExchangeId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ExchangeId);
      }
      if (TokenId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(TokenId);
      }
      if (Quant != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Quant);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OwnerAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(OwnerAddress);
      }
      if (ExchangeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExchangeId);
      }
      if (TokenId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TokenId);
      }
      if (Quant != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Quant);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExchangeWithdrawContract other) {
      if (other == null) {
        return;
      }
      if (other.OwnerAddress.Length != 0) {
        OwnerAddress = other.OwnerAddress;
      }
      if (other.ExchangeId != 0L) {
        ExchangeId = other.ExchangeId;
      }
      if (other.TokenId.Length != 0) {
        TokenId = other.TokenId;
      }
      if (other.Quant != 0L) {
        Quant = other.Quant;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            OwnerAddress = input.ReadBytes();
            break;
          }
          case 16: {
            ExchangeId = input.ReadInt64();
            break;
          }
          case 26: {
            TokenId = input.ReadBytes();
            break;
          }
          case 32: {
            Quant = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExchangeTransactionContract : pb::IMessage<ExchangeTransactionContract> {
    private static readonly pb::MessageParser<ExchangeTransactionContract> _parser = new pb::MessageParser<ExchangeTransactionContract>(() => new ExchangeTransactionContract());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExchangeTransactionContract> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tron.Net.Protocol.ExchangeContractReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeTransactionContract() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeTransactionContract(ExchangeTransactionContract other) : this() {
      ownerAddress_ = other.ownerAddress_;
      exchangeId_ = other.exchangeId_;
      tokenId_ = other.tokenId_;
      quant_ = other.quant_;
      expected_ = other.expected_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeTransactionContract Clone() {
      return new ExchangeTransactionContract(this);
    }

    /// <summary>Field number for the "owner_address" field.</summary>
    public const int OwnerAddressFieldNumber = 1;
    private pb::ByteString ownerAddress_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OwnerAddress {
      get { return ownerAddress_; }
      set {
        ownerAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exchange_id" field.</summary>
    public const int ExchangeIdFieldNumber = 2;
    private long exchangeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExchangeId {
      get { return exchangeId_; }
      set {
        exchangeId_ = value;
      }
    }

    /// <summary>Field number for the "token_id" field.</summary>
    public const int TokenIdFieldNumber = 3;
    private pb::ByteString tokenId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TokenId {
      get { return tokenId_; }
      set {
        tokenId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "quant" field.</summary>
    public const int QuantFieldNumber = 4;
    private long quant_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Quant {
      get { return quant_; }
      set {
        quant_ = value;
      }
    }

    /// <summary>Field number for the "expected" field.</summary>
    public const int ExpectedFieldNumber = 5;
    private long expected_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Expected {
      get { return expected_; }
      set {
        expected_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExchangeTransactionContract);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExchangeTransactionContract other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OwnerAddress != other.OwnerAddress) return false;
      if (ExchangeId != other.ExchangeId) return false;
      if (TokenId != other.TokenId) return false;
      if (Quant != other.Quant) return false;
      if (Expected != other.Expected) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OwnerAddress.Length != 0) hash ^= OwnerAddress.GetHashCode();
      if (ExchangeId != 0L) hash ^= ExchangeId.GetHashCode();
      if (TokenId.Length != 0) hash ^= TokenId.GetHashCode();
      if (Quant != 0L) hash ^= Quant.GetHashCode();
      if (Expected != 0L) hash ^= Expected.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OwnerAddress.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(OwnerAddress);
      }
      if (ExchangeId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ExchangeId);
      }
      if (TokenId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(TokenId);
      }
      if (Quant != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Quant);
      }
      if (Expected != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Expected);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OwnerAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(OwnerAddress);
      }
      if (ExchangeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExchangeId);
      }
      if (TokenId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TokenId);
      }
      if (Quant != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Quant);
      }
      if (Expected != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Expected);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExchangeTransactionContract other) {
      if (other == null) {
        return;
      }
      if (other.OwnerAddress.Length != 0) {
        OwnerAddress = other.OwnerAddress;
      }
      if (other.ExchangeId != 0L) {
        ExchangeId = other.ExchangeId;
      }
      if (other.TokenId.Length != 0) {
        TokenId = other.TokenId;
      }
      if (other.Quant != 0L) {
        Quant = other.Quant;
      }
      if (other.Expected != 0L) {
        Expected = other.Expected;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            OwnerAddress = input.ReadBytes();
            break;
          }
          case 16: {
            ExchangeId = input.ReadInt64();
            break;
          }
          case 26: {
            TokenId = input.ReadBytes();
            break;
          }
          case 32: {
            Quant = input.ReadInt64();
            break;
          }
          case 40: {
            Expected = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
