// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tronprotocol/core/contract/shield_contract.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tron.Net.Protocol {

  /// <summary>Holder for reflection information generated from tronprotocol/core/contract/shield_contract.proto</summary>
  public static partial class ShieldContractReflection {

    #region Descriptor
    /// <summary>File descriptor for tronprotocol/core/contract/shield_contract.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ShieldContractReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjB0cm9ucHJvdG9jb2wvY29yZS9jb250cmFjdC9zaGllbGRfY29udHJhY3Qu",
            "cHJvdG8SCHByb3RvY29sIiMKEkF1dGhlbnRpY2F0aW9uUGF0aBINCgV2YWx1",
            "ZRgBIAMoCCJjCgpNZXJrbGVQYXRoEjoKFGF1dGhlbnRpY2F0aW9uX3BhdGhz",
            "GAEgAygLMhwucHJvdG9jb2wuQXV0aGVudGljYXRpb25QYXRoEg0KBWluZGV4",
            "GAIgAygIEgoKAnJ0GAMgASgMIioKC091dHB1dFBvaW50EgwKBGhhc2gYASAB",
            "KAwSDQoFaW5kZXgYAiABKAUiTwoPT3V0cHV0UG9pbnRJbmZvEikKCm91dF9w",
            "b2ludHMYASADKAsyFS5wcm90b2NvbC5PdXRwdXRQb2ludBIRCglibG9ja19u",
            "dW0YAiABKAUiHwoMUGVkZXJzZW5IYXNoEg8KB2NvbnRlbnQYASABKAwijQEK",
            "FUluY3JlbWVudGFsTWVya2xlVHJlZRIkCgRsZWZ0GAEgASgLMhYucHJvdG9j",
            "b2wuUGVkZXJzZW5IYXNoEiUKBXJpZ2h0GAIgASgLMhYucHJvdG9jb2wuUGVk",
            "ZXJzZW5IYXNoEicKB3BhcmVudHMYAyADKAsyFi5wcm90b2NvbC5QZWRlcnNl",
            "bkhhc2gi8QEKGEluY3JlbWVudGFsTWVya2xlVm91Y2hlchItCgR0cmVlGAEg",
            "ASgLMh8ucHJvdG9jb2wuSW5jcmVtZW50YWxNZXJrbGVUcmVlEiYKBmZpbGxl",
            "ZBgCIAMoCzIWLnByb3RvY29sLlBlZGVyc2VuSGFzaBIvCgZjdXJzb3IYAyAB",
            "KAsyHy5wcm90b2NvbC5JbmNyZW1lbnRhbE1lcmtsZVRyZWUSFAoMY3Vyc29y",
            "X2RlcHRoGAQgASgDEgoKAnJ0GAUgASgMEisKDG91dHB1dF9wb2ludBgKIAEo",
            "CzIVLnByb3RvY29sLk91dHB1dFBvaW50ImMKHEluY3JlbWVudGFsTWVya2xl",
            "Vm91Y2hlckluZm8SNAoIdm91Y2hlcnMYASADKAsyIi5wcm90b2NvbC5JbmNy",
            "ZW1lbnRhbE1lcmtsZVZvdWNoZXISDQoFcGF0aHMYAiADKAwijwEKEFNwZW5k",
            "RGVzY3JpcHRpb24SGAoQdmFsdWVfY29tbWl0bWVudBgBIAEoDBIOCgZhbmNo",
            "b3IYAiABKAwSEQoJbnVsbGlmaWVyGAMgASgMEgoKAnJrGAQgASgMEg8KB3pr",
            "cHJvb2YYBSABKAwSIQoZc3BlbmRfYXV0aG9yaXR5X3NpZ25hdHVyZRgGIAEo",
            "DCKDAQoSUmVjZWl2ZURlc2NyaXB0aW9uEhgKEHZhbHVlX2NvbW1pdG1lbnQY",
            "ASABKAwSFwoPbm90ZV9jb21taXRtZW50GAIgASgMEgsKA2VwaxgDIAEoDBIN",
            "CgVjX2VuYxgEIAEoDBINCgVjX291dBgFIAEoDBIPCgd6a3Byb29mGAYgASgM",
            "IpECChhTaGllbGRlZFRyYW5zZmVyQ29udHJhY3QSIAoYdHJhbnNwYXJlbnRf",
            "ZnJvbV9hZGRyZXNzGAEgASgMEhMKC2Zyb21fYW1vdW50GAIgASgDEjUKEXNw",
            "ZW5kX2Rlc2NyaXB0aW9uGAMgAygLMhoucHJvdG9jb2wuU3BlbmREZXNjcmlw",
            "dGlvbhI5ChNyZWNlaXZlX2Rlc2NyaXB0aW9uGAQgAygLMhwucHJvdG9jb2wu",
            "UmVjZWl2ZURlc2NyaXB0aW9uEhkKEWJpbmRpbmdfc2lnbmF0dXJlGAUgASgM",
            "Eh4KFnRyYW5zcGFyZW50X3RvX2FkZHJlc3MYBiABKAwSEQoJdG9fYW1vdW50",
            "GAcgASgDQlkKGG9yZy50cm9uLnByb3Rvcy5jb250cmFjdFopZ2l0aHViLmNv",
            "bS90cm9ucHJvdG9jb2wvZ3JwYy1nYXRld2F5L2NvcmWqAhFUcm9uLk5ldC5Q",
            "cm90b2NvbGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tron.Net.Protocol.AuthenticationPath), global::Tron.Net.Protocol.AuthenticationPath.Parser, new[]{ "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tron.Net.Protocol.MerklePath), global::Tron.Net.Protocol.MerklePath.Parser, new[]{ "AuthenticationPaths", "Index", "Rt" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tron.Net.Protocol.OutputPoint), global::Tron.Net.Protocol.OutputPoint.Parser, new[]{ "Hash", "Index" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tron.Net.Protocol.OutputPointInfo), global::Tron.Net.Protocol.OutputPointInfo.Parser, new[]{ "OutPoints", "BlockNum" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tron.Net.Protocol.PedersenHash), global::Tron.Net.Protocol.PedersenHash.Parser, new[]{ "Content" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tron.Net.Protocol.IncrementalMerkleTree), global::Tron.Net.Protocol.IncrementalMerkleTree.Parser, new[]{ "Left", "Right", "Parents" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tron.Net.Protocol.IncrementalMerkleVoucher), global::Tron.Net.Protocol.IncrementalMerkleVoucher.Parser, new[]{ "Tree", "Filled", "Cursor", "CursorDepth", "Rt", "OutputPoint" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tron.Net.Protocol.IncrementalMerkleVoucherInfo), global::Tron.Net.Protocol.IncrementalMerkleVoucherInfo.Parser, new[]{ "Vouchers", "Paths" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tron.Net.Protocol.SpendDescription), global::Tron.Net.Protocol.SpendDescription.Parser, new[]{ "ValueCommitment", "Anchor", "Nullifier", "Rk", "Zkproof", "SpendAuthoritySignature" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tron.Net.Protocol.ReceiveDescription), global::Tron.Net.Protocol.ReceiveDescription.Parser, new[]{ "ValueCommitment", "NoteCommitment", "Epk", "CEnc", "COut", "Zkproof" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tron.Net.Protocol.ShieldedTransferContract), global::Tron.Net.Protocol.ShieldedTransferContract.Parser, new[]{ "TransparentFromAddress", "FromAmount", "SpendDescription", "ReceiveDescription", "BindingSignature", "TransparentToAddress", "ToAmount" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class AuthenticationPath : pb::IMessage<AuthenticationPath> {
    private static readonly pb::MessageParser<AuthenticationPath> _parser = new pb::MessageParser<AuthenticationPath>(() => new AuthenticationPath());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthenticationPath> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tron.Net.Protocol.ShieldContractReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticationPath() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticationPath(AuthenticationPath other) : this() {
      value_ = other.value_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticationPath Clone() {
      return new AuthenticationPath(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private static readonly pb::FieldCodec<bool> _repeated_value_codec
        = pb::FieldCodec.ForBool(10);
    private readonly pbc::RepeatedField<bool> value_ = new pbc::RepeatedField<bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> Value {
      get { return value_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthenticationPath);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthenticationPath other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!value_.Equals(other.value_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= value_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      value_.WriteTo(output, _repeated_value_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += value_.CalculateSize(_repeated_value_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthenticationPath other) {
      if (other == null) {
        return;
      }
      value_.Add(other.value_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            value_.AddEntriesFrom(input, _repeated_value_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MerklePath : pb::IMessage<MerklePath> {
    private static readonly pb::MessageParser<MerklePath> _parser = new pb::MessageParser<MerklePath>(() => new MerklePath());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MerklePath> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tron.Net.Protocol.ShieldContractReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MerklePath() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MerklePath(MerklePath other) : this() {
      authenticationPaths_ = other.authenticationPaths_.Clone();
      index_ = other.index_.Clone();
      rt_ = other.rt_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MerklePath Clone() {
      return new MerklePath(this);
    }

    /// <summary>Field number for the "authentication_paths" field.</summary>
    public const int AuthenticationPathsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tron.Net.Protocol.AuthenticationPath> _repeated_authenticationPaths_codec
        = pb::FieldCodec.ForMessage(10, global::Tron.Net.Protocol.AuthenticationPath.Parser);
    private readonly pbc::RepeatedField<global::Tron.Net.Protocol.AuthenticationPath> authenticationPaths_ = new pbc::RepeatedField<global::Tron.Net.Protocol.AuthenticationPath>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tron.Net.Protocol.AuthenticationPath> AuthenticationPaths {
      get { return authenticationPaths_; }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private static readonly pb::FieldCodec<bool> _repeated_index_codec
        = pb::FieldCodec.ForBool(18);
    private readonly pbc::RepeatedField<bool> index_ = new pbc::RepeatedField<bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> Index {
      get { return index_; }
    }

    /// <summary>Field number for the "rt" field.</summary>
    public const int RtFieldNumber = 3;
    private pb::ByteString rt_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Rt {
      get { return rt_; }
      set {
        rt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MerklePath);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MerklePath other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!authenticationPaths_.Equals(other.authenticationPaths_)) return false;
      if(!index_.Equals(other.index_)) return false;
      if (Rt != other.Rt) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= authenticationPaths_.GetHashCode();
      hash ^= index_.GetHashCode();
      if (Rt.Length != 0) hash ^= Rt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      authenticationPaths_.WriteTo(output, _repeated_authenticationPaths_codec);
      index_.WriteTo(output, _repeated_index_codec);
      if (Rt.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Rt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += authenticationPaths_.CalculateSize(_repeated_authenticationPaths_codec);
      size += index_.CalculateSize(_repeated_index_codec);
      if (Rt.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Rt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MerklePath other) {
      if (other == null) {
        return;
      }
      authenticationPaths_.Add(other.authenticationPaths_);
      index_.Add(other.index_);
      if (other.Rt.Length != 0) {
        Rt = other.Rt;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            authenticationPaths_.AddEntriesFrom(input, _repeated_authenticationPaths_codec);
            break;
          }
          case 18:
          case 16: {
            index_.AddEntriesFrom(input, _repeated_index_codec);
            break;
          }
          case 26: {
            Rt = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OutputPoint : pb::IMessage<OutputPoint> {
    private static readonly pb::MessageParser<OutputPoint> _parser = new pb::MessageParser<OutputPoint>(() => new OutputPoint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OutputPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tron.Net.Protocol.ShieldContractReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutputPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutputPoint(OutputPoint other) : this() {
      hash_ = other.hash_;
      index_ = other.index_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutputPoint Clone() {
      return new OutputPoint(this);
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 1;
    private pb::ByteString hash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Hash {
      get { return hash_; }
      set {
        hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OutputPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OutputPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Hash != other.Hash) return false;
      if (Index != other.Index) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Hash.Length != 0) hash ^= Hash.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Hash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Hash);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Index);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Hash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Hash);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OutputPoint other) {
      if (other == null) {
        return;
      }
      if (other.Hash.Length != 0) {
        Hash = other.Hash;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Hash = input.ReadBytes();
            break;
          }
          case 16: {
            Index = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OutputPointInfo : pb::IMessage<OutputPointInfo> {
    private static readonly pb::MessageParser<OutputPointInfo> _parser = new pb::MessageParser<OutputPointInfo>(() => new OutputPointInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OutputPointInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tron.Net.Protocol.ShieldContractReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutputPointInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutputPointInfo(OutputPointInfo other) : this() {
      outPoints_ = other.outPoints_.Clone();
      blockNum_ = other.blockNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutputPointInfo Clone() {
      return new OutputPointInfo(this);
    }

    /// <summary>Field number for the "out_points" field.</summary>
    public const int OutPointsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tron.Net.Protocol.OutputPoint> _repeated_outPoints_codec
        = pb::FieldCodec.ForMessage(10, global::Tron.Net.Protocol.OutputPoint.Parser);
    private readonly pbc::RepeatedField<global::Tron.Net.Protocol.OutputPoint> outPoints_ = new pbc::RepeatedField<global::Tron.Net.Protocol.OutputPoint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tron.Net.Protocol.OutputPoint> OutPoints {
      get { return outPoints_; }
    }

    /// <summary>Field number for the "block_num" field.</summary>
    public const int BlockNumFieldNumber = 2;
    private int blockNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlockNum {
      get { return blockNum_; }
      set {
        blockNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OutputPointInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OutputPointInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!outPoints_.Equals(other.outPoints_)) return false;
      if (BlockNum != other.BlockNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= outPoints_.GetHashCode();
      if (BlockNum != 0) hash ^= BlockNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      outPoints_.WriteTo(output, _repeated_outPoints_codec);
      if (BlockNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BlockNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += outPoints_.CalculateSize(_repeated_outPoints_codec);
      if (BlockNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OutputPointInfo other) {
      if (other == null) {
        return;
      }
      outPoints_.Add(other.outPoints_);
      if (other.BlockNum != 0) {
        BlockNum = other.BlockNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            outPoints_.AddEntriesFrom(input, _repeated_outPoints_codec);
            break;
          }
          case 16: {
            BlockNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PedersenHash : pb::IMessage<PedersenHash> {
    private static readonly pb::MessageParser<PedersenHash> _parser = new pb::MessageParser<PedersenHash>(() => new PedersenHash());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PedersenHash> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tron.Net.Protocol.ShieldContractReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PedersenHash() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PedersenHash(PedersenHash other) : this() {
      content_ = other.content_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PedersenHash Clone() {
      return new PedersenHash(this);
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 1;
    private pb::ByteString content_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PedersenHash);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PedersenHash other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Content != other.Content) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Content.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Content);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Content);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PedersenHash other) {
      if (other == null) {
        return;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Content = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IncrementalMerkleTree : pb::IMessage<IncrementalMerkleTree> {
    private static readonly pb::MessageParser<IncrementalMerkleTree> _parser = new pb::MessageParser<IncrementalMerkleTree>(() => new IncrementalMerkleTree());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IncrementalMerkleTree> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tron.Net.Protocol.ShieldContractReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IncrementalMerkleTree() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IncrementalMerkleTree(IncrementalMerkleTree other) : this() {
      left_ = other.left_ != null ? other.left_.Clone() : null;
      right_ = other.right_ != null ? other.right_.Clone() : null;
      parents_ = other.parents_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IncrementalMerkleTree Clone() {
      return new IncrementalMerkleTree(this);
    }

    /// <summary>Field number for the "left" field.</summary>
    public const int LeftFieldNumber = 1;
    private global::Tron.Net.Protocol.PedersenHash left_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tron.Net.Protocol.PedersenHash Left {
      get { return left_; }
      set {
        left_ = value;
      }
    }

    /// <summary>Field number for the "right" field.</summary>
    public const int RightFieldNumber = 2;
    private global::Tron.Net.Protocol.PedersenHash right_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tron.Net.Protocol.PedersenHash Right {
      get { return right_; }
      set {
        right_ = value;
      }
    }

    /// <summary>Field number for the "parents" field.</summary>
    public const int ParentsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Tron.Net.Protocol.PedersenHash> _repeated_parents_codec
        = pb::FieldCodec.ForMessage(26, global::Tron.Net.Protocol.PedersenHash.Parser);
    private readonly pbc::RepeatedField<global::Tron.Net.Protocol.PedersenHash> parents_ = new pbc::RepeatedField<global::Tron.Net.Protocol.PedersenHash>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tron.Net.Protocol.PedersenHash> Parents {
      get { return parents_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IncrementalMerkleTree);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IncrementalMerkleTree other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Left, other.Left)) return false;
      if (!object.Equals(Right, other.Right)) return false;
      if(!parents_.Equals(other.parents_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (left_ != null) hash ^= Left.GetHashCode();
      if (right_ != null) hash ^= Right.GetHashCode();
      hash ^= parents_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (left_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Left);
      }
      if (right_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Right);
      }
      parents_.WriteTo(output, _repeated_parents_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (left_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Left);
      }
      if (right_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Right);
      }
      size += parents_.CalculateSize(_repeated_parents_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IncrementalMerkleTree other) {
      if (other == null) {
        return;
      }
      if (other.left_ != null) {
        if (left_ == null) {
          Left = new global::Tron.Net.Protocol.PedersenHash();
        }
        Left.MergeFrom(other.Left);
      }
      if (other.right_ != null) {
        if (right_ == null) {
          Right = new global::Tron.Net.Protocol.PedersenHash();
        }
        Right.MergeFrom(other.Right);
      }
      parents_.Add(other.parents_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (left_ == null) {
              Left = new global::Tron.Net.Protocol.PedersenHash();
            }
            input.ReadMessage(Left);
            break;
          }
          case 18: {
            if (right_ == null) {
              Right = new global::Tron.Net.Protocol.PedersenHash();
            }
            input.ReadMessage(Right);
            break;
          }
          case 26: {
            parents_.AddEntriesFrom(input, _repeated_parents_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class IncrementalMerkleVoucher : pb::IMessage<IncrementalMerkleVoucher> {
    private static readonly pb::MessageParser<IncrementalMerkleVoucher> _parser = new pb::MessageParser<IncrementalMerkleVoucher>(() => new IncrementalMerkleVoucher());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IncrementalMerkleVoucher> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tron.Net.Protocol.ShieldContractReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IncrementalMerkleVoucher() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IncrementalMerkleVoucher(IncrementalMerkleVoucher other) : this() {
      tree_ = other.tree_ != null ? other.tree_.Clone() : null;
      filled_ = other.filled_.Clone();
      cursor_ = other.cursor_ != null ? other.cursor_.Clone() : null;
      cursorDepth_ = other.cursorDepth_;
      rt_ = other.rt_;
      outputPoint_ = other.outputPoint_ != null ? other.outputPoint_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IncrementalMerkleVoucher Clone() {
      return new IncrementalMerkleVoucher(this);
    }

    /// <summary>Field number for the "tree" field.</summary>
    public const int TreeFieldNumber = 1;
    private global::Tron.Net.Protocol.IncrementalMerkleTree tree_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tron.Net.Protocol.IncrementalMerkleTree Tree {
      get { return tree_; }
      set {
        tree_ = value;
      }
    }

    /// <summary>Field number for the "filled" field.</summary>
    public const int FilledFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Tron.Net.Protocol.PedersenHash> _repeated_filled_codec
        = pb::FieldCodec.ForMessage(18, global::Tron.Net.Protocol.PedersenHash.Parser);
    private readonly pbc::RepeatedField<global::Tron.Net.Protocol.PedersenHash> filled_ = new pbc::RepeatedField<global::Tron.Net.Protocol.PedersenHash>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tron.Net.Protocol.PedersenHash> Filled {
      get { return filled_; }
    }

    /// <summary>Field number for the "cursor" field.</summary>
    public const int CursorFieldNumber = 3;
    private global::Tron.Net.Protocol.IncrementalMerkleTree cursor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tron.Net.Protocol.IncrementalMerkleTree Cursor {
      get { return cursor_; }
      set {
        cursor_ = value;
      }
    }

    /// <summary>Field number for the "cursor_depth" field.</summary>
    public const int CursorDepthFieldNumber = 4;
    private long cursorDepth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CursorDepth {
      get { return cursorDepth_; }
      set {
        cursorDepth_ = value;
      }
    }

    /// <summary>Field number for the "rt" field.</summary>
    public const int RtFieldNumber = 5;
    private pb::ByteString rt_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Rt {
      get { return rt_; }
      set {
        rt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "output_point" field.</summary>
    public const int OutputPointFieldNumber = 10;
    private global::Tron.Net.Protocol.OutputPoint outputPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tron.Net.Protocol.OutputPoint OutputPoint {
      get { return outputPoint_; }
      set {
        outputPoint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IncrementalMerkleVoucher);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IncrementalMerkleVoucher other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Tree, other.Tree)) return false;
      if(!filled_.Equals(other.filled_)) return false;
      if (!object.Equals(Cursor, other.Cursor)) return false;
      if (CursorDepth != other.CursorDepth) return false;
      if (Rt != other.Rt) return false;
      if (!object.Equals(OutputPoint, other.OutputPoint)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (tree_ != null) hash ^= Tree.GetHashCode();
      hash ^= filled_.GetHashCode();
      if (cursor_ != null) hash ^= Cursor.GetHashCode();
      if (CursorDepth != 0L) hash ^= CursorDepth.GetHashCode();
      if (Rt.Length != 0) hash ^= Rt.GetHashCode();
      if (outputPoint_ != null) hash ^= OutputPoint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (tree_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Tree);
      }
      filled_.WriteTo(output, _repeated_filled_codec);
      if (cursor_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Cursor);
      }
      if (CursorDepth != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(CursorDepth);
      }
      if (Rt.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Rt);
      }
      if (outputPoint_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(OutputPoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (tree_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tree);
      }
      size += filled_.CalculateSize(_repeated_filled_codec);
      if (cursor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cursor);
      }
      if (CursorDepth != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CursorDepth);
      }
      if (Rt.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Rt);
      }
      if (outputPoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OutputPoint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IncrementalMerkleVoucher other) {
      if (other == null) {
        return;
      }
      if (other.tree_ != null) {
        if (tree_ == null) {
          Tree = new global::Tron.Net.Protocol.IncrementalMerkleTree();
        }
        Tree.MergeFrom(other.Tree);
      }
      filled_.Add(other.filled_);
      if (other.cursor_ != null) {
        if (cursor_ == null) {
          Cursor = new global::Tron.Net.Protocol.IncrementalMerkleTree();
        }
        Cursor.MergeFrom(other.Cursor);
      }
      if (other.CursorDepth != 0L) {
        CursorDepth = other.CursorDepth;
      }
      if (other.Rt.Length != 0) {
        Rt = other.Rt;
      }
      if (other.outputPoint_ != null) {
        if (outputPoint_ == null) {
          OutputPoint = new global::Tron.Net.Protocol.OutputPoint();
        }
        OutputPoint.MergeFrom(other.OutputPoint);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (tree_ == null) {
              Tree = new global::Tron.Net.Protocol.IncrementalMerkleTree();
            }
            input.ReadMessage(Tree);
            break;
          }
          case 18: {
            filled_.AddEntriesFrom(input, _repeated_filled_codec);
            break;
          }
          case 26: {
            if (cursor_ == null) {
              Cursor = new global::Tron.Net.Protocol.IncrementalMerkleTree();
            }
            input.ReadMessage(Cursor);
            break;
          }
          case 32: {
            CursorDepth = input.ReadInt64();
            break;
          }
          case 42: {
            Rt = input.ReadBytes();
            break;
          }
          case 82: {
            if (outputPoint_ == null) {
              OutputPoint = new global::Tron.Net.Protocol.OutputPoint();
            }
            input.ReadMessage(OutputPoint);
            break;
          }
        }
      }
    }

  }

  public sealed partial class IncrementalMerkleVoucherInfo : pb::IMessage<IncrementalMerkleVoucherInfo> {
    private static readonly pb::MessageParser<IncrementalMerkleVoucherInfo> _parser = new pb::MessageParser<IncrementalMerkleVoucherInfo>(() => new IncrementalMerkleVoucherInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IncrementalMerkleVoucherInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tron.Net.Protocol.ShieldContractReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IncrementalMerkleVoucherInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IncrementalMerkleVoucherInfo(IncrementalMerkleVoucherInfo other) : this() {
      vouchers_ = other.vouchers_.Clone();
      paths_ = other.paths_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IncrementalMerkleVoucherInfo Clone() {
      return new IncrementalMerkleVoucherInfo(this);
    }

    /// <summary>Field number for the "vouchers" field.</summary>
    public const int VouchersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tron.Net.Protocol.IncrementalMerkleVoucher> _repeated_vouchers_codec
        = pb::FieldCodec.ForMessage(10, global::Tron.Net.Protocol.IncrementalMerkleVoucher.Parser);
    private readonly pbc::RepeatedField<global::Tron.Net.Protocol.IncrementalMerkleVoucher> vouchers_ = new pbc::RepeatedField<global::Tron.Net.Protocol.IncrementalMerkleVoucher>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tron.Net.Protocol.IncrementalMerkleVoucher> Vouchers {
      get { return vouchers_; }
    }

    /// <summary>Field number for the "paths" field.</summary>
    public const int PathsFieldNumber = 2;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_paths_codec
        = pb::FieldCodec.ForBytes(18);
    private readonly pbc::RepeatedField<pb::ByteString> paths_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Paths {
      get { return paths_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IncrementalMerkleVoucherInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IncrementalMerkleVoucherInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!vouchers_.Equals(other.vouchers_)) return false;
      if(!paths_.Equals(other.paths_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= vouchers_.GetHashCode();
      hash ^= paths_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      vouchers_.WriteTo(output, _repeated_vouchers_codec);
      paths_.WriteTo(output, _repeated_paths_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += vouchers_.CalculateSize(_repeated_vouchers_codec);
      size += paths_.CalculateSize(_repeated_paths_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IncrementalMerkleVoucherInfo other) {
      if (other == null) {
        return;
      }
      vouchers_.Add(other.vouchers_);
      paths_.Add(other.paths_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            vouchers_.AddEntriesFrom(input, _repeated_vouchers_codec);
            break;
          }
          case 18: {
            paths_.AddEntriesFrom(input, _repeated_paths_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SpendDescription : pb::IMessage<SpendDescription> {
    private static readonly pb::MessageParser<SpendDescription> _parser = new pb::MessageParser<SpendDescription>(() => new SpendDescription());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpendDescription> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tron.Net.Protocol.ShieldContractReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpendDescription() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpendDescription(SpendDescription other) : this() {
      valueCommitment_ = other.valueCommitment_;
      anchor_ = other.anchor_;
      nullifier_ = other.nullifier_;
      rk_ = other.rk_;
      zkproof_ = other.zkproof_;
      spendAuthoritySignature_ = other.spendAuthoritySignature_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpendDescription Clone() {
      return new SpendDescription(this);
    }

    /// <summary>Field number for the "value_commitment" field.</summary>
    public const int ValueCommitmentFieldNumber = 1;
    private pb::ByteString valueCommitment_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ValueCommitment {
      get { return valueCommitment_; }
      set {
        valueCommitment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "anchor" field.</summary>
    public const int AnchorFieldNumber = 2;
    private pb::ByteString anchor_ = pb::ByteString.Empty;
    /// <summary>
    /// merkle root
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Anchor {
      get { return anchor_; }
      set {
        anchor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nullifier" field.</summary>
    public const int NullifierFieldNumber = 3;
    private pb::ByteString nullifier_ = pb::ByteString.Empty;
    /// <summary>
    /// used for check double spend
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Nullifier {
      get { return nullifier_; }
      set {
        nullifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rk" field.</summary>
    public const int RkFieldNumber = 4;
    private pb::ByteString rk_ = pb::ByteString.Empty;
    /// <summary>
    /// used for check spend authority signature
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Rk {
      get { return rk_; }
      set {
        rk_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "zkproof" field.</summary>
    public const int ZkproofFieldNumber = 5;
    private pb::ByteString zkproof_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Zkproof {
      get { return zkproof_; }
      set {
        zkproof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "spend_authority_signature" field.</summary>
    public const int SpendAuthoritySignatureFieldNumber = 6;
    private pb::ByteString spendAuthoritySignature_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SpendAuthoritySignature {
      get { return spendAuthoritySignature_; }
      set {
        spendAuthoritySignature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpendDescription);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpendDescription other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ValueCommitment != other.ValueCommitment) return false;
      if (Anchor != other.Anchor) return false;
      if (Nullifier != other.Nullifier) return false;
      if (Rk != other.Rk) return false;
      if (Zkproof != other.Zkproof) return false;
      if (SpendAuthoritySignature != other.SpendAuthoritySignature) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ValueCommitment.Length != 0) hash ^= ValueCommitment.GetHashCode();
      if (Anchor.Length != 0) hash ^= Anchor.GetHashCode();
      if (Nullifier.Length != 0) hash ^= Nullifier.GetHashCode();
      if (Rk.Length != 0) hash ^= Rk.GetHashCode();
      if (Zkproof.Length != 0) hash ^= Zkproof.GetHashCode();
      if (SpendAuthoritySignature.Length != 0) hash ^= SpendAuthoritySignature.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ValueCommitment.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(ValueCommitment);
      }
      if (Anchor.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Anchor);
      }
      if (Nullifier.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Nullifier);
      }
      if (Rk.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Rk);
      }
      if (Zkproof.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Zkproof);
      }
      if (SpendAuthoritySignature.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(SpendAuthoritySignature);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ValueCommitment.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ValueCommitment);
      }
      if (Anchor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Anchor);
      }
      if (Nullifier.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Nullifier);
      }
      if (Rk.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Rk);
      }
      if (Zkproof.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Zkproof);
      }
      if (SpendAuthoritySignature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SpendAuthoritySignature);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpendDescription other) {
      if (other == null) {
        return;
      }
      if (other.ValueCommitment.Length != 0) {
        ValueCommitment = other.ValueCommitment;
      }
      if (other.Anchor.Length != 0) {
        Anchor = other.Anchor;
      }
      if (other.Nullifier.Length != 0) {
        Nullifier = other.Nullifier;
      }
      if (other.Rk.Length != 0) {
        Rk = other.Rk;
      }
      if (other.Zkproof.Length != 0) {
        Zkproof = other.Zkproof;
      }
      if (other.SpendAuthoritySignature.Length != 0) {
        SpendAuthoritySignature = other.SpendAuthoritySignature;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ValueCommitment = input.ReadBytes();
            break;
          }
          case 18: {
            Anchor = input.ReadBytes();
            break;
          }
          case 26: {
            Nullifier = input.ReadBytes();
            break;
          }
          case 34: {
            Rk = input.ReadBytes();
            break;
          }
          case 42: {
            Zkproof = input.ReadBytes();
            break;
          }
          case 50: {
            SpendAuthoritySignature = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReceiveDescription : pb::IMessage<ReceiveDescription> {
    private static readonly pb::MessageParser<ReceiveDescription> _parser = new pb::MessageParser<ReceiveDescription>(() => new ReceiveDescription());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReceiveDescription> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tron.Net.Protocol.ShieldContractReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiveDescription() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiveDescription(ReceiveDescription other) : this() {
      valueCommitment_ = other.valueCommitment_;
      noteCommitment_ = other.noteCommitment_;
      epk_ = other.epk_;
      cEnc_ = other.cEnc_;
      cOut_ = other.cOut_;
      zkproof_ = other.zkproof_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiveDescription Clone() {
      return new ReceiveDescription(this);
    }

    /// <summary>Field number for the "value_commitment" field.</summary>
    public const int ValueCommitmentFieldNumber = 1;
    private pb::ByteString valueCommitment_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ValueCommitment {
      get { return valueCommitment_; }
      set {
        valueCommitment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "note_commitment" field.</summary>
    public const int NoteCommitmentFieldNumber = 2;
    private pb::ByteString noteCommitment_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString NoteCommitment {
      get { return noteCommitment_; }
      set {
        noteCommitment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "epk" field.</summary>
    public const int EpkFieldNumber = 3;
    private pb::ByteString epk_ = pb::ByteString.Empty;
    /// <summary>
    /// for Encryption
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Epk {
      get { return epk_; }
      set {
        epk_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "c_enc" field.</summary>
    public const int CEncFieldNumber = 4;
    private pb::ByteString cEnc_ = pb::ByteString.Empty;
    /// <summary>
    /// Encryption for incoming, decrypt it with ivk
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CEnc {
      get { return cEnc_; }
      set {
        cEnc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "c_out" field.</summary>
    public const int COutFieldNumber = 5;
    private pb::ByteString cOut_ = pb::ByteString.Empty;
    /// <summary>
    /// Encryption for audit, decrypt it with ovk
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString COut {
      get { return cOut_; }
      set {
        cOut_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "zkproof" field.</summary>
    public const int ZkproofFieldNumber = 6;
    private pb::ByteString zkproof_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Zkproof {
      get { return zkproof_; }
      set {
        zkproof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReceiveDescription);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReceiveDescription other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ValueCommitment != other.ValueCommitment) return false;
      if (NoteCommitment != other.NoteCommitment) return false;
      if (Epk != other.Epk) return false;
      if (CEnc != other.CEnc) return false;
      if (COut != other.COut) return false;
      if (Zkproof != other.Zkproof) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ValueCommitment.Length != 0) hash ^= ValueCommitment.GetHashCode();
      if (NoteCommitment.Length != 0) hash ^= NoteCommitment.GetHashCode();
      if (Epk.Length != 0) hash ^= Epk.GetHashCode();
      if (CEnc.Length != 0) hash ^= CEnc.GetHashCode();
      if (COut.Length != 0) hash ^= COut.GetHashCode();
      if (Zkproof.Length != 0) hash ^= Zkproof.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ValueCommitment.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(ValueCommitment);
      }
      if (NoteCommitment.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(NoteCommitment);
      }
      if (Epk.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Epk);
      }
      if (CEnc.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(CEnc);
      }
      if (COut.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(COut);
      }
      if (Zkproof.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(Zkproof);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ValueCommitment.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ValueCommitment);
      }
      if (NoteCommitment.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(NoteCommitment);
      }
      if (Epk.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Epk);
      }
      if (CEnc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CEnc);
      }
      if (COut.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(COut);
      }
      if (Zkproof.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Zkproof);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReceiveDescription other) {
      if (other == null) {
        return;
      }
      if (other.ValueCommitment.Length != 0) {
        ValueCommitment = other.ValueCommitment;
      }
      if (other.NoteCommitment.Length != 0) {
        NoteCommitment = other.NoteCommitment;
      }
      if (other.Epk.Length != 0) {
        Epk = other.Epk;
      }
      if (other.CEnc.Length != 0) {
        CEnc = other.CEnc;
      }
      if (other.COut.Length != 0) {
        COut = other.COut;
      }
      if (other.Zkproof.Length != 0) {
        Zkproof = other.Zkproof;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ValueCommitment = input.ReadBytes();
            break;
          }
          case 18: {
            NoteCommitment = input.ReadBytes();
            break;
          }
          case 26: {
            Epk = input.ReadBytes();
            break;
          }
          case 34: {
            CEnc = input.ReadBytes();
            break;
          }
          case 42: {
            COut = input.ReadBytes();
            break;
          }
          case 50: {
            Zkproof = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ShieldedTransferContract : pb::IMessage<ShieldedTransferContract> {
    private static readonly pb::MessageParser<ShieldedTransferContract> _parser = new pb::MessageParser<ShieldedTransferContract>(() => new ShieldedTransferContract());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShieldedTransferContract> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tron.Net.Protocol.ShieldContractReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShieldedTransferContract() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShieldedTransferContract(ShieldedTransferContract other) : this() {
      transparentFromAddress_ = other.transparentFromAddress_;
      fromAmount_ = other.fromAmount_;
      spendDescription_ = other.spendDescription_.Clone();
      receiveDescription_ = other.receiveDescription_.Clone();
      bindingSignature_ = other.bindingSignature_;
      transparentToAddress_ = other.transparentToAddress_;
      toAmount_ = other.toAmount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShieldedTransferContract Clone() {
      return new ShieldedTransferContract(this);
    }

    /// <summary>Field number for the "transparent_from_address" field.</summary>
    public const int TransparentFromAddressFieldNumber = 1;
    private pb::ByteString transparentFromAddress_ = pb::ByteString.Empty;
    /// <summary>
    /// transparent address
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TransparentFromAddress {
      get { return transparentFromAddress_; }
      set {
        transparentFromAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "from_amount" field.</summary>
    public const int FromAmountFieldNumber = 2;
    private long fromAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FromAmount {
      get { return fromAmount_; }
      set {
        fromAmount_ = value;
      }
    }

    /// <summary>Field number for the "spend_description" field.</summary>
    public const int SpendDescriptionFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Tron.Net.Protocol.SpendDescription> _repeated_spendDescription_codec
        = pb::FieldCodec.ForMessage(26, global::Tron.Net.Protocol.SpendDescription.Parser);
    private readonly pbc::RepeatedField<global::Tron.Net.Protocol.SpendDescription> spendDescription_ = new pbc::RepeatedField<global::Tron.Net.Protocol.SpendDescription>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tron.Net.Protocol.SpendDescription> SpendDescription {
      get { return spendDescription_; }
    }

    /// <summary>Field number for the "receive_description" field.</summary>
    public const int ReceiveDescriptionFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Tron.Net.Protocol.ReceiveDescription> _repeated_receiveDescription_codec
        = pb::FieldCodec.ForMessage(34, global::Tron.Net.Protocol.ReceiveDescription.Parser);
    private readonly pbc::RepeatedField<global::Tron.Net.Protocol.ReceiveDescription> receiveDescription_ = new pbc::RepeatedField<global::Tron.Net.Protocol.ReceiveDescription>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tron.Net.Protocol.ReceiveDescription> ReceiveDescription {
      get { return receiveDescription_; }
    }

    /// <summary>Field number for the "binding_signature" field.</summary>
    public const int BindingSignatureFieldNumber = 5;
    private pb::ByteString bindingSignature_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BindingSignature {
      get { return bindingSignature_; }
      set {
        bindingSignature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "transparent_to_address" field.</summary>
    public const int TransparentToAddressFieldNumber = 6;
    private pb::ByteString transparentToAddress_ = pb::ByteString.Empty;
    /// <summary>
    /// transparent address
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TransparentToAddress {
      get { return transparentToAddress_; }
      set {
        transparentToAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "to_amount" field.</summary>
    public const int ToAmountFieldNumber = 7;
    private long toAmount_;
    /// <summary>
    /// the amount to transparent to_address
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ToAmount {
      get { return toAmount_; }
      set {
        toAmount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShieldedTransferContract);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShieldedTransferContract other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransparentFromAddress != other.TransparentFromAddress) return false;
      if (FromAmount != other.FromAmount) return false;
      if(!spendDescription_.Equals(other.spendDescription_)) return false;
      if(!receiveDescription_.Equals(other.receiveDescription_)) return false;
      if (BindingSignature != other.BindingSignature) return false;
      if (TransparentToAddress != other.TransparentToAddress) return false;
      if (ToAmount != other.ToAmount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransparentFromAddress.Length != 0) hash ^= TransparentFromAddress.GetHashCode();
      if (FromAmount != 0L) hash ^= FromAmount.GetHashCode();
      hash ^= spendDescription_.GetHashCode();
      hash ^= receiveDescription_.GetHashCode();
      if (BindingSignature.Length != 0) hash ^= BindingSignature.GetHashCode();
      if (TransparentToAddress.Length != 0) hash ^= TransparentToAddress.GetHashCode();
      if (ToAmount != 0L) hash ^= ToAmount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransparentFromAddress.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(TransparentFromAddress);
      }
      if (FromAmount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(FromAmount);
      }
      spendDescription_.WriteTo(output, _repeated_spendDescription_codec);
      receiveDescription_.WriteTo(output, _repeated_receiveDescription_codec);
      if (BindingSignature.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(BindingSignature);
      }
      if (TransparentToAddress.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(TransparentToAddress);
      }
      if (ToAmount != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(ToAmount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransparentFromAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TransparentFromAddress);
      }
      if (FromAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FromAmount);
      }
      size += spendDescription_.CalculateSize(_repeated_spendDescription_codec);
      size += receiveDescription_.CalculateSize(_repeated_receiveDescription_codec);
      if (BindingSignature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BindingSignature);
      }
      if (TransparentToAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TransparentToAddress);
      }
      if (ToAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ToAmount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShieldedTransferContract other) {
      if (other == null) {
        return;
      }
      if (other.TransparentFromAddress.Length != 0) {
        TransparentFromAddress = other.TransparentFromAddress;
      }
      if (other.FromAmount != 0L) {
        FromAmount = other.FromAmount;
      }
      spendDescription_.Add(other.spendDescription_);
      receiveDescription_.Add(other.receiveDescription_);
      if (other.BindingSignature.Length != 0) {
        BindingSignature = other.BindingSignature;
      }
      if (other.TransparentToAddress.Length != 0) {
        TransparentToAddress = other.TransparentToAddress;
      }
      if (other.ToAmount != 0L) {
        ToAmount = other.ToAmount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TransparentFromAddress = input.ReadBytes();
            break;
          }
          case 16: {
            FromAmount = input.ReadInt64();
            break;
          }
          case 26: {
            spendDescription_.AddEntriesFrom(input, _repeated_spendDescription_codec);
            break;
          }
          case 34: {
            receiveDescription_.AddEntriesFrom(input, _repeated_receiveDescription_codec);
            break;
          }
          case 42: {
            BindingSignature = input.ReadBytes();
            break;
          }
          case 50: {
            TransparentToAddress = input.ReadBytes();
            break;
          }
          case 56: {
            ToAmount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
