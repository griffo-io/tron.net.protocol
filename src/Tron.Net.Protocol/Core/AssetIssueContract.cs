// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tronprotocol/core/contract/asset_issue_contract.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tron.Net.Protocol {

  /// <summary>Holder for reflection information generated from tronprotocol/core/contract/asset_issue_contract.proto</summary>
  public static partial class AssetIssueContractReflection {

    #region Descriptor
    /// <summary>File descriptor for tronprotocol/core/contract/asset_issue_contract.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AssetIssueContractReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjV0cm9ucHJvdG9jb2wvY29yZS9jb250cmFjdC9hc3NldF9pc3N1ZV9jb250",
            "cmFjdC5wcm90bxIIcHJvdG9jb2wikAQKEkFzc2V0SXNzdWVDb250cmFjdBIK",
            "CgJpZBgpIAEoCRIVCg1vd25lcl9hZGRyZXNzGAEgASgMEgwKBG5hbWUYAiAB",
            "KAwSDAoEYWJichgDIAEoDBIUCgx0b3RhbF9zdXBwbHkYBCABKAMSQAoNZnJv",
            "emVuX3N1cHBseRgFIAMoCzIpLnByb3RvY29sLkFzc2V0SXNzdWVDb250cmFj",
            "dC5Gcm96ZW5TdXBwbHkSDwoHdHJ4X251bRgGIAEoBRIRCglwcmVjaXNpb24Y",
            "ByABKAUSCwoDbnVtGAggASgFEhIKCnN0YXJ0X3RpbWUYCSABKAMSEAoIZW5k",
            "X3RpbWUYCiABKAMSDQoFb3JkZXIYCyABKAMSEgoKdm90ZV9zY29yZRgQIAEo",
            "BRITCgtkZXNjcmlwdGlvbhgUIAEoDBILCgN1cmwYFSABKAwSHAoUZnJlZV9h",
            "c3NldF9uZXRfbGltaXQYFiABKAMSIwobcHVibGljX2ZyZWVfYXNzZXRfbmV0",
            "X2xpbWl0GBcgASgDEiMKG3B1YmxpY19mcmVlX2Fzc2V0X25ldF91c2FnZRgY",
            "IAEoAxIjChtwdWJsaWNfbGF0ZXN0X2ZyZWVfbmV0X3RpbWUYGSABKAMaOgoM",
            "RnJvemVuU3VwcGx5EhUKDWZyb3plbl9hbW91bnQYASABKAMSEwoLZnJvemVu",
            "X2RheXMYAiABKAMiZgoVVHJhbnNmZXJBc3NldENvbnRyYWN0EhIKCmFzc2V0",
            "X25hbWUYASABKAwSFQoNb3duZXJfYWRkcmVzcxgCIAEoDBISCgp0b19hZGRy",
            "ZXNzGAMgASgMEg4KBmFtb3VudBgEIAEoAyIuChVVbmZyZWV6ZUFzc2V0Q29u",
            "dHJhY3QSFQoNb3duZXJfYWRkcmVzcxgBIAEoDCJ7ChNVcGRhdGVBc3NldENv",
            "bnRyYWN0EhUKDW93bmVyX2FkZHJlc3MYASABKAwSEwoLZGVzY3JpcHRpb24Y",
            "AiABKAwSCwoDdXJsGAMgASgMEhEKCW5ld19saW1pdBgEIAEoAxIYChBuZXdf",
            "cHVibGljX2xpbWl0GAUgASgDIm4KHVBhcnRpY2lwYXRlQXNzZXRJc3N1ZUNv",
            "bnRyYWN0EhUKDW93bmVyX2FkZHJlc3MYASABKAwSEgoKdG9fYWRkcmVzcxgC",
            "IAEoDBISCgphc3NldF9uYW1lGAMgASgMEg4KBmFtb3VudBgEIAEoA0JZChhv",
            "cmcudHJvbi5wcm90b3MuY29udHJhY3RaKWdpdGh1Yi5jb20vdHJvbnByb3Rv",
            "Y29sL2dycGMtZ2F0ZXdheS9jb3JlqgIRVHJvbi5OZXQuUHJvdG9jb2xiBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tron.Net.Protocol.AssetIssueContract), global::Tron.Net.Protocol.AssetIssueContract.Parser, new[]{ "Id", "OwnerAddress", "Name", "Abbr", "TotalSupply", "FrozenSupply", "TrxNum", "Precision", "Num", "StartTime", "EndTime", "Order", "VoteScore", "Description", "Url", "FreeAssetNetLimit", "PublicFreeAssetNetLimit", "PublicFreeAssetNetUsage", "PublicLatestFreeNetTime" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Tron.Net.Protocol.AssetIssueContract.Types.FrozenSupply), global::Tron.Net.Protocol.AssetIssueContract.Types.FrozenSupply.Parser, new[]{ "FrozenAmount", "FrozenDays" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tron.Net.Protocol.TransferAssetContract), global::Tron.Net.Protocol.TransferAssetContract.Parser, new[]{ "AssetName", "OwnerAddress", "ToAddress", "Amount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tron.Net.Protocol.UnfreezeAssetContract), global::Tron.Net.Protocol.UnfreezeAssetContract.Parser, new[]{ "OwnerAddress" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tron.Net.Protocol.UpdateAssetContract), global::Tron.Net.Protocol.UpdateAssetContract.Parser, new[]{ "OwnerAddress", "Description", "Url", "NewLimit", "NewPublicLimit" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tron.Net.Protocol.ParticipateAssetIssueContract), global::Tron.Net.Protocol.ParticipateAssetIssueContract.Parser, new[]{ "OwnerAddress", "ToAddress", "AssetName", "Amount" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class AssetIssueContract : pb::IMessage<AssetIssueContract> {
    private static readonly pb::MessageParser<AssetIssueContract> _parser = new pb::MessageParser<AssetIssueContract>(() => new AssetIssueContract());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AssetIssueContract> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tron.Net.Protocol.AssetIssueContractReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssetIssueContract() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssetIssueContract(AssetIssueContract other) : this() {
      id_ = other.id_;
      ownerAddress_ = other.ownerAddress_;
      name_ = other.name_;
      abbr_ = other.abbr_;
      totalSupply_ = other.totalSupply_;
      frozenSupply_ = other.frozenSupply_.Clone();
      trxNum_ = other.trxNum_;
      precision_ = other.precision_;
      num_ = other.num_;
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
      order_ = other.order_;
      voteScore_ = other.voteScore_;
      description_ = other.description_;
      url_ = other.url_;
      freeAssetNetLimit_ = other.freeAssetNetLimit_;
      publicFreeAssetNetLimit_ = other.publicFreeAssetNetLimit_;
      publicFreeAssetNetUsage_ = other.publicFreeAssetNetUsage_;
      publicLatestFreeNetTime_ = other.publicLatestFreeNetTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssetIssueContract Clone() {
      return new AssetIssueContract(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 41;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner_address" field.</summary>
    public const int OwnerAddressFieldNumber = 1;
    private pb::ByteString ownerAddress_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OwnerAddress {
      get { return ownerAddress_; }
      set {
        ownerAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "abbr" field.</summary>
    public const int AbbrFieldNumber = 3;
    private pb::ByteString abbr_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Abbr {
      get { return abbr_; }
      set {
        abbr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "total_supply" field.</summary>
    public const int TotalSupplyFieldNumber = 4;
    private long totalSupply_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalSupply {
      get { return totalSupply_; }
      set {
        totalSupply_ = value;
      }
    }

    /// <summary>Field number for the "frozen_supply" field.</summary>
    public const int FrozenSupplyFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Tron.Net.Protocol.AssetIssueContract.Types.FrozenSupply> _repeated_frozenSupply_codec
        = pb::FieldCodec.ForMessage(42, global::Tron.Net.Protocol.AssetIssueContract.Types.FrozenSupply.Parser);
    private readonly pbc::RepeatedField<global::Tron.Net.Protocol.AssetIssueContract.Types.FrozenSupply> frozenSupply_ = new pbc::RepeatedField<global::Tron.Net.Protocol.AssetIssueContract.Types.FrozenSupply>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tron.Net.Protocol.AssetIssueContract.Types.FrozenSupply> FrozenSupply {
      get { return frozenSupply_; }
    }

    /// <summary>Field number for the "trx_num" field.</summary>
    public const int TrxNumFieldNumber = 6;
    private int trxNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TrxNum {
      get { return trxNum_; }
      set {
        trxNum_ = value;
      }
    }

    /// <summary>Field number for the "precision" field.</summary>
    public const int PrecisionFieldNumber = 7;
    private int precision_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Precision {
      get { return precision_; }
      set {
        precision_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 8;
    private int num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 9;
    private long startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 10;
    private long endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "order" field.</summary>
    public const int OrderFieldNumber = 11;
    private long order_;
    /// <summary>
    /// useless
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Order {
      get { return order_; }
      set {
        order_ = value;
      }
    }

    /// <summary>Field number for the "vote_score" field.</summary>
    public const int VoteScoreFieldNumber = 16;
    private int voteScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VoteScore {
      get { return voteScore_; }
      set {
        voteScore_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 20;
    private pb::ByteString description_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "url" field.</summary>
    public const int UrlFieldNumber = 21;
    private pb::ByteString url_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Url {
      get { return url_; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "free_asset_net_limit" field.</summary>
    public const int FreeAssetNetLimitFieldNumber = 22;
    private long freeAssetNetLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FreeAssetNetLimit {
      get { return freeAssetNetLimit_; }
      set {
        freeAssetNetLimit_ = value;
      }
    }

    /// <summary>Field number for the "public_free_asset_net_limit" field.</summary>
    public const int PublicFreeAssetNetLimitFieldNumber = 23;
    private long publicFreeAssetNetLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PublicFreeAssetNetLimit {
      get { return publicFreeAssetNetLimit_; }
      set {
        publicFreeAssetNetLimit_ = value;
      }
    }

    /// <summary>Field number for the "public_free_asset_net_usage" field.</summary>
    public const int PublicFreeAssetNetUsageFieldNumber = 24;
    private long publicFreeAssetNetUsage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PublicFreeAssetNetUsage {
      get { return publicFreeAssetNetUsage_; }
      set {
        publicFreeAssetNetUsage_ = value;
      }
    }

    /// <summary>Field number for the "public_latest_free_net_time" field.</summary>
    public const int PublicLatestFreeNetTimeFieldNumber = 25;
    private long publicLatestFreeNetTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PublicLatestFreeNetTime {
      get { return publicLatestFreeNetTime_; }
      set {
        publicLatestFreeNetTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AssetIssueContract);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AssetIssueContract other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (OwnerAddress != other.OwnerAddress) return false;
      if (Name != other.Name) return false;
      if (Abbr != other.Abbr) return false;
      if (TotalSupply != other.TotalSupply) return false;
      if(!frozenSupply_.Equals(other.frozenSupply_)) return false;
      if (TrxNum != other.TrxNum) return false;
      if (Precision != other.Precision) return false;
      if (Num != other.Num) return false;
      if (StartTime != other.StartTime) return false;
      if (EndTime != other.EndTime) return false;
      if (Order != other.Order) return false;
      if (VoteScore != other.VoteScore) return false;
      if (Description != other.Description) return false;
      if (Url != other.Url) return false;
      if (FreeAssetNetLimit != other.FreeAssetNetLimit) return false;
      if (PublicFreeAssetNetLimit != other.PublicFreeAssetNetLimit) return false;
      if (PublicFreeAssetNetUsage != other.PublicFreeAssetNetUsage) return false;
      if (PublicLatestFreeNetTime != other.PublicLatestFreeNetTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (OwnerAddress.Length != 0) hash ^= OwnerAddress.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Abbr.Length != 0) hash ^= Abbr.GetHashCode();
      if (TotalSupply != 0L) hash ^= TotalSupply.GetHashCode();
      hash ^= frozenSupply_.GetHashCode();
      if (TrxNum != 0) hash ^= TrxNum.GetHashCode();
      if (Precision != 0) hash ^= Precision.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (StartTime != 0L) hash ^= StartTime.GetHashCode();
      if (EndTime != 0L) hash ^= EndTime.GetHashCode();
      if (Order != 0L) hash ^= Order.GetHashCode();
      if (VoteScore != 0) hash ^= VoteScore.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Url.Length != 0) hash ^= Url.GetHashCode();
      if (FreeAssetNetLimit != 0L) hash ^= FreeAssetNetLimit.GetHashCode();
      if (PublicFreeAssetNetLimit != 0L) hash ^= PublicFreeAssetNetLimit.GetHashCode();
      if (PublicFreeAssetNetUsage != 0L) hash ^= PublicFreeAssetNetUsage.GetHashCode();
      if (PublicLatestFreeNetTime != 0L) hash ^= PublicLatestFreeNetTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OwnerAddress.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(OwnerAddress);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Name);
      }
      if (Abbr.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Abbr);
      }
      if (TotalSupply != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(TotalSupply);
      }
      frozenSupply_.WriteTo(output, _repeated_frozenSupply_codec);
      if (TrxNum != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(TrxNum);
      }
      if (Precision != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Precision);
      }
      if (Num != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Num);
      }
      if (StartTime != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(StartTime);
      }
      if (EndTime != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(EndTime);
      }
      if (Order != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(Order);
      }
      if (VoteScore != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(VoteScore);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(Description);
      }
      if (Url.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteBytes(Url);
      }
      if (FreeAssetNetLimit != 0L) {
        output.WriteRawTag(176, 1);
        output.WriteInt64(FreeAssetNetLimit);
      }
      if (PublicFreeAssetNetLimit != 0L) {
        output.WriteRawTag(184, 1);
        output.WriteInt64(PublicFreeAssetNetLimit);
      }
      if (PublicFreeAssetNetUsage != 0L) {
        output.WriteRawTag(192, 1);
        output.WriteInt64(PublicFreeAssetNetUsage);
      }
      if (PublicLatestFreeNetTime != 0L) {
        output.WriteRawTag(200, 1);
        output.WriteInt64(PublicLatestFreeNetTime);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(202, 2);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (OwnerAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(OwnerAddress);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (Abbr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Abbr);
      }
      if (TotalSupply != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalSupply);
      }
      size += frozenSupply_.CalculateSize(_repeated_frozenSupply_codec);
      if (TrxNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TrxNum);
      }
      if (Precision != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Precision);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (StartTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
      }
      if (EndTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
      }
      if (Order != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Order);
      }
      if (VoteScore != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(VoteScore);
      }
      if (Description.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Description);
      }
      if (Url.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Url);
      }
      if (FreeAssetNetLimit != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(FreeAssetNetLimit);
      }
      if (PublicFreeAssetNetLimit != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(PublicFreeAssetNetLimit);
      }
      if (PublicFreeAssetNetUsage != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(PublicFreeAssetNetUsage);
      }
      if (PublicLatestFreeNetTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(PublicLatestFreeNetTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AssetIssueContract other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.OwnerAddress.Length != 0) {
        OwnerAddress = other.OwnerAddress;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Abbr.Length != 0) {
        Abbr = other.Abbr;
      }
      if (other.TotalSupply != 0L) {
        TotalSupply = other.TotalSupply;
      }
      frozenSupply_.Add(other.frozenSupply_);
      if (other.TrxNum != 0) {
        TrxNum = other.TrxNum;
      }
      if (other.Precision != 0) {
        Precision = other.Precision;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      if (other.StartTime != 0L) {
        StartTime = other.StartTime;
      }
      if (other.EndTime != 0L) {
        EndTime = other.EndTime;
      }
      if (other.Order != 0L) {
        Order = other.Order;
      }
      if (other.VoteScore != 0) {
        VoteScore = other.VoteScore;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Url.Length != 0) {
        Url = other.Url;
      }
      if (other.FreeAssetNetLimit != 0L) {
        FreeAssetNetLimit = other.FreeAssetNetLimit;
      }
      if (other.PublicFreeAssetNetLimit != 0L) {
        PublicFreeAssetNetLimit = other.PublicFreeAssetNetLimit;
      }
      if (other.PublicFreeAssetNetUsage != 0L) {
        PublicFreeAssetNetUsage = other.PublicFreeAssetNetUsage;
      }
      if (other.PublicLatestFreeNetTime != 0L) {
        PublicLatestFreeNetTime = other.PublicLatestFreeNetTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            OwnerAddress = input.ReadBytes();
            break;
          }
          case 18: {
            Name = input.ReadBytes();
            break;
          }
          case 26: {
            Abbr = input.ReadBytes();
            break;
          }
          case 32: {
            TotalSupply = input.ReadInt64();
            break;
          }
          case 42: {
            frozenSupply_.AddEntriesFrom(input, _repeated_frozenSupply_codec);
            break;
          }
          case 48: {
            TrxNum = input.ReadInt32();
            break;
          }
          case 56: {
            Precision = input.ReadInt32();
            break;
          }
          case 64: {
            Num = input.ReadInt32();
            break;
          }
          case 72: {
            StartTime = input.ReadInt64();
            break;
          }
          case 80: {
            EndTime = input.ReadInt64();
            break;
          }
          case 88: {
            Order = input.ReadInt64();
            break;
          }
          case 128: {
            VoteScore = input.ReadInt32();
            break;
          }
          case 162: {
            Description = input.ReadBytes();
            break;
          }
          case 170: {
            Url = input.ReadBytes();
            break;
          }
          case 176: {
            FreeAssetNetLimit = input.ReadInt64();
            break;
          }
          case 184: {
            PublicFreeAssetNetLimit = input.ReadInt64();
            break;
          }
          case 192: {
            PublicFreeAssetNetUsage = input.ReadInt64();
            break;
          }
          case 200: {
            PublicLatestFreeNetTime = input.ReadInt64();
            break;
          }
          case 330: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AssetIssueContract message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class FrozenSupply : pb::IMessage<FrozenSupply> {
        private static readonly pb::MessageParser<FrozenSupply> _parser = new pb::MessageParser<FrozenSupply>(() => new FrozenSupply());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FrozenSupply> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Tron.Net.Protocol.AssetIssueContract.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FrozenSupply() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FrozenSupply(FrozenSupply other) : this() {
          frozenAmount_ = other.frozenAmount_;
          frozenDays_ = other.frozenDays_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FrozenSupply Clone() {
          return new FrozenSupply(this);
        }

        /// <summary>Field number for the "frozen_amount" field.</summary>
        public const int FrozenAmountFieldNumber = 1;
        private long frozenAmount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long FrozenAmount {
          get { return frozenAmount_; }
          set {
            frozenAmount_ = value;
          }
        }

        /// <summary>Field number for the "frozen_days" field.</summary>
        public const int FrozenDaysFieldNumber = 2;
        private long frozenDays_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long FrozenDays {
          get { return frozenDays_; }
          set {
            frozenDays_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as FrozenSupply);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FrozenSupply other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (FrozenAmount != other.FrozenAmount) return false;
          if (FrozenDays != other.FrozenDays) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (FrozenAmount != 0L) hash ^= FrozenAmount.GetHashCode();
          if (FrozenDays != 0L) hash ^= FrozenDays.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (FrozenAmount != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(FrozenAmount);
          }
          if (FrozenDays != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(FrozenDays);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (FrozenAmount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(FrozenAmount);
          }
          if (FrozenDays != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(FrozenDays);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FrozenSupply other) {
          if (other == null) {
            return;
          }
          if (other.FrozenAmount != 0L) {
            FrozenAmount = other.FrozenAmount;
          }
          if (other.FrozenDays != 0L) {
            FrozenDays = other.FrozenDays;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                FrozenAmount = input.ReadInt64();
                break;
              }
              case 16: {
                FrozenDays = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class TransferAssetContract : pb::IMessage<TransferAssetContract> {
    private static readonly pb::MessageParser<TransferAssetContract> _parser = new pb::MessageParser<TransferAssetContract>(() => new TransferAssetContract());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransferAssetContract> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tron.Net.Protocol.AssetIssueContractReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferAssetContract() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferAssetContract(TransferAssetContract other) : this() {
      assetName_ = other.assetName_;
      ownerAddress_ = other.ownerAddress_;
      toAddress_ = other.toAddress_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferAssetContract Clone() {
      return new TransferAssetContract(this);
    }

    /// <summary>Field number for the "asset_name" field.</summary>
    public const int AssetNameFieldNumber = 1;
    private pb::ByteString assetName_ = pb::ByteString.Empty;
    /// <summary>
    /// this field is token name before the proposal ALLOW_SAME_TOKEN_NAME is active, otherwise it is token id and token is should be in string format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AssetName {
      get { return assetName_; }
      set {
        assetName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner_address" field.</summary>
    public const int OwnerAddressFieldNumber = 2;
    private pb::ByteString ownerAddress_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OwnerAddress {
      get { return ownerAddress_; }
      set {
        ownerAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "to_address" field.</summary>
    public const int ToAddressFieldNumber = 3;
    private pb::ByteString toAddress_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ToAddress {
      get { return toAddress_; }
      set {
        toAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 4;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransferAssetContract);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransferAssetContract other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AssetName != other.AssetName) return false;
      if (OwnerAddress != other.OwnerAddress) return false;
      if (ToAddress != other.ToAddress) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AssetName.Length != 0) hash ^= AssetName.GetHashCode();
      if (OwnerAddress.Length != 0) hash ^= OwnerAddress.GetHashCode();
      if (ToAddress.Length != 0) hash ^= ToAddress.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AssetName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(AssetName);
      }
      if (OwnerAddress.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(OwnerAddress);
      }
      if (ToAddress.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(ToAddress);
      }
      if (Amount != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AssetName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AssetName);
      }
      if (OwnerAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(OwnerAddress);
      }
      if (ToAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ToAddress);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransferAssetContract other) {
      if (other == null) {
        return;
      }
      if (other.AssetName.Length != 0) {
        AssetName = other.AssetName;
      }
      if (other.OwnerAddress.Length != 0) {
        OwnerAddress = other.OwnerAddress;
      }
      if (other.ToAddress.Length != 0) {
        ToAddress = other.ToAddress;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AssetName = input.ReadBytes();
            break;
          }
          case 18: {
            OwnerAddress = input.ReadBytes();
            break;
          }
          case 26: {
            ToAddress = input.ReadBytes();
            break;
          }
          case 32: {
            Amount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UnfreezeAssetContract : pb::IMessage<UnfreezeAssetContract> {
    private static readonly pb::MessageParser<UnfreezeAssetContract> _parser = new pb::MessageParser<UnfreezeAssetContract>(() => new UnfreezeAssetContract());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnfreezeAssetContract> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tron.Net.Protocol.AssetIssueContractReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnfreezeAssetContract() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnfreezeAssetContract(UnfreezeAssetContract other) : this() {
      ownerAddress_ = other.ownerAddress_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnfreezeAssetContract Clone() {
      return new UnfreezeAssetContract(this);
    }

    /// <summary>Field number for the "owner_address" field.</summary>
    public const int OwnerAddressFieldNumber = 1;
    private pb::ByteString ownerAddress_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OwnerAddress {
      get { return ownerAddress_; }
      set {
        ownerAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnfreezeAssetContract);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnfreezeAssetContract other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OwnerAddress != other.OwnerAddress) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OwnerAddress.Length != 0) hash ^= OwnerAddress.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OwnerAddress.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(OwnerAddress);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OwnerAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(OwnerAddress);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnfreezeAssetContract other) {
      if (other == null) {
        return;
      }
      if (other.OwnerAddress.Length != 0) {
        OwnerAddress = other.OwnerAddress;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            OwnerAddress = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateAssetContract : pb::IMessage<UpdateAssetContract> {
    private static readonly pb::MessageParser<UpdateAssetContract> _parser = new pb::MessageParser<UpdateAssetContract>(() => new UpdateAssetContract());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateAssetContract> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tron.Net.Protocol.AssetIssueContractReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateAssetContract() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateAssetContract(UpdateAssetContract other) : this() {
      ownerAddress_ = other.ownerAddress_;
      description_ = other.description_;
      url_ = other.url_;
      newLimit_ = other.newLimit_;
      newPublicLimit_ = other.newPublicLimit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateAssetContract Clone() {
      return new UpdateAssetContract(this);
    }

    /// <summary>Field number for the "owner_address" field.</summary>
    public const int OwnerAddressFieldNumber = 1;
    private pb::ByteString ownerAddress_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OwnerAddress {
      get { return ownerAddress_; }
      set {
        ownerAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private pb::ByteString description_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "url" field.</summary>
    public const int UrlFieldNumber = 3;
    private pb::ByteString url_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Url {
      get { return url_; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "new_limit" field.</summary>
    public const int NewLimitFieldNumber = 4;
    private long newLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NewLimit {
      get { return newLimit_; }
      set {
        newLimit_ = value;
      }
    }

    /// <summary>Field number for the "new_public_limit" field.</summary>
    public const int NewPublicLimitFieldNumber = 5;
    private long newPublicLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NewPublicLimit {
      get { return newPublicLimit_; }
      set {
        newPublicLimit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateAssetContract);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateAssetContract other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OwnerAddress != other.OwnerAddress) return false;
      if (Description != other.Description) return false;
      if (Url != other.Url) return false;
      if (NewLimit != other.NewLimit) return false;
      if (NewPublicLimit != other.NewPublicLimit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OwnerAddress.Length != 0) hash ^= OwnerAddress.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Url.Length != 0) hash ^= Url.GetHashCode();
      if (NewLimit != 0L) hash ^= NewLimit.GetHashCode();
      if (NewPublicLimit != 0L) hash ^= NewPublicLimit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OwnerAddress.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(OwnerAddress);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Description);
      }
      if (Url.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Url);
      }
      if (NewLimit != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(NewLimit);
      }
      if (NewPublicLimit != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(NewPublicLimit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OwnerAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(OwnerAddress);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Description);
      }
      if (Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Url);
      }
      if (NewLimit != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NewLimit);
      }
      if (NewPublicLimit != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NewPublicLimit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateAssetContract other) {
      if (other == null) {
        return;
      }
      if (other.OwnerAddress.Length != 0) {
        OwnerAddress = other.OwnerAddress;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Url.Length != 0) {
        Url = other.Url;
      }
      if (other.NewLimit != 0L) {
        NewLimit = other.NewLimit;
      }
      if (other.NewPublicLimit != 0L) {
        NewPublicLimit = other.NewPublicLimit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            OwnerAddress = input.ReadBytes();
            break;
          }
          case 18: {
            Description = input.ReadBytes();
            break;
          }
          case 26: {
            Url = input.ReadBytes();
            break;
          }
          case 32: {
            NewLimit = input.ReadInt64();
            break;
          }
          case 40: {
            NewPublicLimit = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ParticipateAssetIssueContract : pb::IMessage<ParticipateAssetIssueContract> {
    private static readonly pb::MessageParser<ParticipateAssetIssueContract> _parser = new pb::MessageParser<ParticipateAssetIssueContract>(() => new ParticipateAssetIssueContract());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ParticipateAssetIssueContract> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tron.Net.Protocol.AssetIssueContractReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParticipateAssetIssueContract() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParticipateAssetIssueContract(ParticipateAssetIssueContract other) : this() {
      ownerAddress_ = other.ownerAddress_;
      toAddress_ = other.toAddress_;
      assetName_ = other.assetName_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParticipateAssetIssueContract Clone() {
      return new ParticipateAssetIssueContract(this);
    }

    /// <summary>Field number for the "owner_address" field.</summary>
    public const int OwnerAddressFieldNumber = 1;
    private pb::ByteString ownerAddress_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OwnerAddress {
      get { return ownerAddress_; }
      set {
        ownerAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "to_address" field.</summary>
    public const int ToAddressFieldNumber = 2;
    private pb::ByteString toAddress_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ToAddress {
      get { return toAddress_; }
      set {
        toAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "asset_name" field.</summary>
    public const int AssetNameFieldNumber = 3;
    private pb::ByteString assetName_ = pb::ByteString.Empty;
    /// <summary>
    /// this field is token name before the proposal ALLOW_SAME_TOKEN_NAME is active, otherwise it is token id and token is should be in string format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AssetName {
      get { return assetName_; }
      set {
        assetName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 4;
    private long amount_;
    /// <summary>
    /// the amount of drops
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ParticipateAssetIssueContract);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ParticipateAssetIssueContract other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OwnerAddress != other.OwnerAddress) return false;
      if (ToAddress != other.ToAddress) return false;
      if (AssetName != other.AssetName) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OwnerAddress.Length != 0) hash ^= OwnerAddress.GetHashCode();
      if (ToAddress.Length != 0) hash ^= ToAddress.GetHashCode();
      if (AssetName.Length != 0) hash ^= AssetName.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OwnerAddress.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(OwnerAddress);
      }
      if (ToAddress.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ToAddress);
      }
      if (AssetName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(AssetName);
      }
      if (Amount != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OwnerAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(OwnerAddress);
      }
      if (ToAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ToAddress);
      }
      if (AssetName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AssetName);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ParticipateAssetIssueContract other) {
      if (other == null) {
        return;
      }
      if (other.OwnerAddress.Length != 0) {
        OwnerAddress = other.OwnerAddress;
      }
      if (other.ToAddress.Length != 0) {
        ToAddress = other.ToAddress;
      }
      if (other.AssetName.Length != 0) {
        AssetName = other.AssetName;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            OwnerAddress = input.ReadBytes();
            break;
          }
          case 18: {
            ToAddress = input.ReadBytes();
            break;
          }
          case 26: {
            AssetName = input.ReadBytes();
            break;
          }
          case 32: {
            Amount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
